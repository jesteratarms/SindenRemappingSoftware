import os
import tkinter as tk
from tkinter import filedialog, messagebox
import re

# =============================================================================
# Check for a folder called "SRS Configs" and create it if it doesn't exist.
# =============================================================================
config_folder = "SRS Configs"
if not os.path.exists(config_folder):
    os.mkdir(config_folder)

# =============================================================================
# Default dropdown options
# =============================================================================
default_options = (
    ["None"] +
    list("ABCDEFGHIJKLMNOPQRSTUVWXYZ") +
    list("abcdefghijklmnopqrstuvwxyz") +
    [str(i) for i in range(0, 10)] +
    ["F" + str(i) for i in range(1, 13)] +
    ["MouseLeft", "MouseRight", "MouseMiddle"]
)

# Example: Print the default_options list
print(default_options)


# =============================================================================
# Configuration options for each key.
# For each key we provide a friendly label and a list of dropdown choices.
# =============================================================================
config_options = {
    # --- Trigger Group ---
    "cbButtonTrigger": {
         "label": "Trigger Button", 
         "options": ["Standard", "Enhanced", "Exclusive"]
    },
    "cbTriggerMod": {
         "label": "Trigger Modifier", 
         "options": ["None", "Modifier1", "Modifier2"]
    },
    "cbButtonTriggerOffscreen": {
         "label": "Trigger Button (Offscreen)", 
         "options": ["Standard", "Enhanced", "Exclusive"]
    },
    "cbTriggerModOffscreen": {
         "label": "Trigger Modifier (Offscreen)", 
         "options": ["None", "Modifier1", "Modifier2"]
    },
    # --- Pump Action Group ---
    "cbButtonPumpAction": {
         "label": "Pump Action Button", 
         "options": ["Standard", "Fast", "Slow"]
    },
    "cbPumpActionMod": {
         "label": "Pump Action Modifier", 
         "options": ["None", "Modifier1", "Modifier2"]
    },
    "cbButtonPumpActionOffscreen": {
         "label": "Pump Action Button (Offscreen)", 
         "options": ["Standard", "Fast", "Slow"]
    },
    "cbPumpActionModOffscreen": {
         "label": "Pump Action Modifier (Offscreen)", 
         "options": ["None", "Modifier1", "Modifier2"]
    },
    # --- Front Left Group ---
    "cbButtonFrontLeft": {
         "label": "Front Left Button", 
         "options": default_options
    },
    "cbFrontLeftMod": {
         "label": "Front Left Modifier", 
         "options": default_options
    },
    "cbButtonFrontLeftOffscreen": {
         "label": "Front Left Button (Offscreen)", 
         "options": default_options
    },
    "cbFrontLeftModOffscreen": {
         "label": "Front Left Modifier (Offscreen)", 
         "options": default_options
    },
    # --- Rear Left Group ---
    "cbButtonRearLeft": {
         "label": "Rear Left Button", 
         "options": default_options
    },
    "cbRearLeftMod": {
         "label": "Rear Left Modifier", 
         "options": default_options
    },
    "cbButtonRearLeftOffscreen": {
         "label": "Rear Left Button (Offscreen)", 
         "options": default_options
    },
    "cbRearLeftModOffscreen": {
         "label": "Rear Left Modifier (Offscreen)", 
         "options": default_options
    },
    # --- Front Right Group ---
    "cbButtonFrontRight": {
         "label": "Front Right Button", 
         "options": default_options
    },
    "cbFrontRightMod": {
         "label": "Front Right Modifier", 
         "options": default_options
    },
    "cbButtonFrontRightOffscreen": {
         "label": "Front Right Button (Offscreen)", 
         "options": default_options
    },
    "cbFrontRightModOffscreen": {
         "label": "Front Right Modifier (Offscreen)", 
         "options": default_options
    },
    # --- Rear Right Group ---
    "cbButtonRearRight": {
         "label": "Rear Right Button", 
         "options": default_options
    },
    "cbRearRightMod": {
         "label": "Rear Right Modifier", 
         "options": default_options
    },
    "cbButtonRearRightOffscreen": {
         "label": "Rear Right Button (Offscreen)", 
         "options": default_options
    },
    "cbRearRightModOffscreen": {
         "label": "Rear Right Modifier (Offscreen)", 
         "options": default_options
    },
    # --- Up Group ---
    "cbButtonUp": {
         "label": "Up Button", 
         "options": default_options
    },
    "cbUpMod": {
         "label": "Up Modifier", 
         "options": default_options
    },
    "cbButtonUpOffscreen": {
         "label": "Up Button (Offscreen)", 
         "options": default_options
    },
    "cbUpModOffscreen": {
         "label": "Up Modifier (Offscreen)", 
         "options": default_options
    },
    # --- Down Group ---
    "cbButtonDown": {
         "label": "Down Button", 
         "options": default_options
    },
    "cbDownMod": {
         "label": "Down Modifier", 
         "options": default_options
    },
    "cbButtonDownOffscreen": {
         "label": "Down Button (Offscreen)", 
         "options": default_options
    },
    "cbDownModOffscreen": {
         "label": "Down Modifier (Offscreen)", 
         "options": default_options
    },
    # --- Left Group ---
    "cbButtonLeft": {
         "label": "Left Button", 
         "options": default_options
    },
    "cbLeftMod": {
         "label": "Left Modifier", 
         "options": default_options
    },
    "cbButtonLeftOffscreen": {
         "label": "Left Button (Offscreen)", 
         "options": default_options
    },
    "cbLeftModOffscreen": {
         "label": "Left Modifier (Offscreen)", 
         "options": default_options
    },
    # --- Right Group ---
    "cbButtonRight": {
         "label": "Right Button", 
         "options": default_options
    },
    "cbRightMod": {
         "label": "Right Modifier", 
         "options": default_options
    },
    "cbButtonRightOffscreen": {
         "label": "Right Button (Offscreen)", 
         "options": default_options
    },
    "cbRightModOffscreen": {
         "label": "Right Modifier (Offscreen)", 
         "options": default_options
    }
}

# =============================================================================
# Define groups for arranging keys (each group has 4 keys in the order below):
# [Primary Button, Primary Modifier, Offscreen Button, Offscreen Modifier]
# =============================================================================
groups = [
    ["cbButtonTrigger", "cbTriggerMod", "cbButtonTriggerOffscreen", "cbTriggerModOffscreen"],
    ["cbButtonPumpAction", "cbPumpActionMod", "cbButtonPumpActionOffscreen", "cbPumpActionModOffscreen"],
    ["cbButtonFrontLeft", "cbFrontLeftMod", "cbButtonFrontLeftOffscreen", "cbFrontLeftModOffscreen"],
    ["cbButtonRearLeft", "cbRearLeftMod", "cbButtonRearLeftOffscreen", "cbRearLeftModOffscreen"],
    ["cbButtonFrontRight", "cbFrontRightMod", "cbButtonFrontRightOffscreen", "cbFrontRightModOffscreen"],
    ["cbButtonRearRight", "cbRearRightMod", "cbButtonRearRightOffscreen", "cbRearRightModOffscreen"],
    ["cbButtonUp", "cbUpMod", "cbButtonUpOffscreen", "cbUpModOffscreen"],
    ["cbButtonDown", "cbDownMod", "cbButtonDownOffscreen", "cbDownModOffscreen"],
    ["cbButtonLeft", "cbLeftMod", "cbButtonLeftOffscreen", "cbLeftModOffscreen"],
    ["cbButtonRight", "cbRightMod", "cbButtonRightOffscreen", "cbRightModOffscreen"]
]

# Create a flat list of keys for file operations.
keys_to_replace = sum(groups, [])

# =============================================================================
# This dictionary will hold the StringVar for each dropdown for later use.
# =============================================================================
dropdowns = {}

# =============================================================================
# Function: update_file
#   Opens a configuration file, searches for lines that start with a key pattern,
#   and replaces the value in the file with the current value from the dropdown.
# =============================================================================
def update_file():
    file_path = filedialog.askopenfilename(
        title="Select Configuration File", 
        filetypes=[("Config Files", "*.config"), ("All Files", "*.*")]
    )
    if not file_path:
        return

    with open(file_path, "r") as file:
        lines = file.readlines()

    for i, line in enumerate(lines):
        for key in keys_to_replace:
            if line.strip().startswith(f'<add key="{key}" value'):
                current_value = dropdowns[key].get()
                lines[i] = re.sub(r'value="[^"]*"', f'value="{current_value}"', line)

    with open(file_path, "w") as file:
        file.writelines(lines)

    messagebox.showinfo("Success", "File updated successfully!")

# =============================================================================
# Function: export_values
#   Exports all current dropdown selections to a configuration file in the
#   "SRS Configs" folder.
# =============================================================================
def export_values():
    file_path = filedialog.asksaveasfilename(
        title="Save Configuration",
        initialdir=config_folder,
        defaultextension=".txt",
        filetypes=[("Text Files", "*.txt"), ("All Files", "*.*")]
    )
    if not file_path:
        return

    try:
        with open(file_path, "w") as file:
            for key, dropdown_var in dropdowns.items():
                file.write(f"{key},{dropdown_var.get()}\n")
        messagebox.showinfo("Success", "Configuration exported successfully!")
    except Exception as e:
        messagebox.showerror("Error", f"Failed to export configuration:\n{e}")

# =============================================================================
# Function: import_values
#   Imports configuration values from a file in the "SRS Configs" folder and
#   updates the dropdowns accordingly.
# =============================================================================
def import_values():
    file_path = filedialog.askopenfilename(
        title="Select Configuration File",
        initialdir=config_folder,
        filetypes=[("Text Files", "*.txt"), ("All Files", "*.*")]
    )
    if not file_path:
        return

    try:
        with open(file_path, "r") as file:
            for line in file:
                try:
                    key, value = line.strip().split(",", 1)
                    if key in dropdowns:
                        dropdowns[key].set(value)
                except ValueError:
                    continue  # skip lines that do not match "key,value" format
        messagebox.showinfo("Success", "Configuration imported successfully!")
    except Exception as e:
        messagebox.showerror("Error", f"Failed to import configuration:\n{e}")

# =============================================================================
# Create the main Tkinter window.
# =============================================================================
root = tk.Tk()
root.title("Sinden Remapper Software (SRS)")

# Top frame for operation buttons.
button_frame = tk.Frame(root)
button_frame.pack(pady=10)

tk.Button(button_frame, text="Import Config", command=import_values).grid(row=0, column=0, padx=5)
tk.Button(button_frame, text="Export Config", command=export_values).grid(row=0, column=1, padx=5)
tk.Button(button_frame, text="Push to Sinden Settings", command=update_file).grid(row=0, column=2, padx=5)

# =============================================================================
# Frame for the grid layout.
# Each group is displayed on its own row.
# Each key in the group gets 2 grid columns (one for the label and one for its dropdown).
# =============================================================================
frame = tk.Frame(root)
frame.pack(pady=10)

for group_index, group in enumerate(groups):
    for col_index, key in enumerate(group):
        label_col = col_index * 2
        dropdown_col = col_index * 2 + 1
        
        # Use the friendly label from config_options; if not found, use the key.
        label_text = config_options.get(key, {}).get("label", key)
        tk.Label(frame, text=label_text, anchor="w").grid(row=group_index, column=label_col, sticky="w", padx=5, pady=2)
        
        # Get the dropdown options (fallback to default options)
        options = config_options.get(key, {}).get("options", default_options)
        
        # Create a StringVar and an OptionMenu for this key.
        var = tk.StringVar(value=options[0])
        dropdown = tk.OptionMenu(frame, var, *options)
        dropdown.grid(row=group_index, column=dropdown_col, padx=5, pady=2)
        dropdowns[key] = var

root.mainloop()
